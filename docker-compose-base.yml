volumes:
    postgresql_data: {}

services:
  gateway-redis:
    image: redis:alpine
    hostname: gw_redis
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "6379:6379"
    networks:
      outer:
        ipv4_address: 173.18.5.4
      external-b:
    labels:
      - "db_container=yes"
      - "scope=base"
      
  gateway-api:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    hostname: gw_api
    env_file: api-gateway.env
    depends_on:
      gateway-redis:
        condition: service_healthy
    networks:
      outer:
        ipv4_address: 173.18.5.3
    labels:
      - "db_container=no"
      - "scope=base"
    
  gateway-nginx:
    image: nginx:latest
    hostname: gw_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./conf/base/nginx:/etc/nginx/conf.d/:ro
      #- ./certbot/www:/var/www/certbot/:ro
      #- ./certbot/conf/:/etc/nginx/ssl/:ro
      - ./nginx-frontends:/var/www/html/
    restart: unless-stopped
    networks:
      outer:
        ipv4_address: 173.18.5.2
      external-b:
    depends_on:
      gateway-api:
        condition: service_started
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
    labels:
      - "db_container=no"
      - "scope=base"
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "2181:2181"
    networks:
      - inner
      - external-b
    labels:
      - "db_container=yes"
      - "scope=base"
    
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092  
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "9092:9092"
    networks:
      - inner
      - external-b
    labels:
      - "db_container=yes"
      - "scope=base"

  kafka-ui:
    hostname: kafka-ui
    build:
      context: conf/base/kafka_ui
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8082:8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    healthcheck: 
      test: curl -s http://localhost:8080 > /dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - inner
      - external-b
    labels:
      - "db_container=no"
      - "scope=base"
  
  service-sso:
    hostname: sso
    build:
      context: .
      dockerfile: sso-service/Dockerfile
    depends_on:
      zookeeper:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    networks:
      inner:
      outer:
        ipv4_address: 173.18.5.6
    labels:
      - "db_container=no"
      - "scope=base"
  
  postgresql:
    hostname: postgresql
    image: postgres:18rc1-alpine
    environment:
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    networks:
      inner:
      external-b:
    labels:
      - "db_container=yes"
      - "scope=base"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 5s
      retries: 20
  

networks:
  outer:
    driver: bridge
    internal: true
    ipam:
     config:
       - subnet: 173.18.5.0/24

  inner:
    driver: bridge
    internal: true

  external-b:
    driver: bridge
    internal: false